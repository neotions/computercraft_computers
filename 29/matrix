-- Deep Copy Function (Should only be called with object to be copied)
function deepcopy(orig, copies)
    copies = copies or {}
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        if copies[orig] then
            copy = copies[orig]
        else
            copy = {}
            copies[orig] = copy
            for orig_key, orig_value in next, orig, nil do
                copy[deepcopy(orig_key, copies)] = deepcopy(orig_value, copies)
            end
            setmetatable(copy, deepcopy(getmetatable(orig), copies))
        end
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

-- Matrix class (Matrix entry set to nil; requires initialization)
local Matrix = {mat = nil, nrow = 0, ncol = 0}
Matrix.__index = Matrix

-- Matrix operators
Matrix.__add = function(lhs, rhs)
    if (lhs.nrow ~= rhs.nrow or lhs.ncol ~= rhs.ncol)
    then
        error("Matrix dimensions must agree.")
    else
        C = Matrix:new(lhs)
        for i = 1, C.nrow do
            for j = 1, C.ncol do 
                C.mat[i][j] = C.mat[i][j] + rhs.mat[i][j]
            end
        end
    end
    return C
end

Matrix.__sub = function(lhs, rhs)
    if (lhs.nrow ~= rhs.nrow or lhs.ncol ~= rhs.ncol)
    then
        error("Matrix dimensions must agree.")
    else
        C = Matrix:new(lhs)
        for i = 1, C.nrow do
            for j = 1, C.ncol do 
                C.mat[i][j] = C.mat[i][j] - rhs.mat[i][j]
            end
        end
    end
    return C
end

Matrix.__mul = function(lhs, rhs) -- Will not work if used incorrectly
    C = Matrix:new()
    if (type(lhs) == "number") then
        C.nrow = rhs.nrow
        C.ncol = rhs.ncol
        for i = 1, C.nrow do
            C.mat[i] = {}
            for j = 1, C.ncol do 
                C.mat[i][j] = lhs * rhs.mat[i][j]
            end
        end
    elseif (lhs.ncol ~= rhs.nrow) then
        error ("LHS column dim must equal RHS row dim")
    else
        C.nrow = lhs.nrow
        C.ncol = rhs.ncol
        for i = 1, C.nrow do
            C.mat[i] = {}
            for j = 1, C.ncol do
                product_sum = 0
                for k = 1, rhs.nrow do
                    product_sum = product_sum + lhs.mat[i][k] * rhs.mat[k][j]
                end
                C.mat[i][j] = product_sum
            end
        end
    end
    return C
end

Matrix.__tostring = function(A)
    out_str = ""
    for i = 1, A.nrow do
        if (i == 1) then
            out_str = out_str .. "[["
        else
            out_str = out_str .. " ["
        end
        
        for j = 1, A.ncol do
            out_str = out_str .. A.mat[i][j]
            if (j ~= A.ncol) then
                out_str = out_str .. ", "
            else
                out_str = out_str .. "]"
            end
        end
        
        if (i == A.nrow) then
            out_str = out_str .. "]"
        else
            out_str = out_str .. "\n"
        end
    end
    return out_str
end

-- Matrix constructor
function Matrix:new(o)
    if (o) then
        o = deepcopy(o)
    else
        o = {}
        o.mat = {}
    end  
    setmetatable(o, self)
    self.__index = self
    return o
end

function Matrix.transpose(self)
    A_transpose = zero_mat(self.ncol, self.nrow)
    for i = 1, self.nrow do
        for j = 1, self.ncol do 
            A_transpose.mat[j][i] = self.mat[i][j]
        end
    end
    return A_transpose
end

function Matrix.get_nrow(self)
    return self.nrow
end

function k_mat(nrow, ncol, k)
    A = Matrix:new()
    A.nrow = nrow
    A.ncol = ncol

    A.mat = {}
    for i = 1, nrow do
        A.mat[i] = {}
        for j = 1, ncol do
            A.mat[i][j] = k
        end
    end
    return A
end

function zero_mat(nrow, ncol)
    return k_mat(nrow, ncol, 0)
end

function one_mat(nrow, ncol)
    return k_mat(nrow, ncol, 1)
end

function eye_mat(dim)
    I = zero_mat(dim, dim)
    for i = 1, dim do 
        I.mat[i][i] = 1
    end
    return I
end